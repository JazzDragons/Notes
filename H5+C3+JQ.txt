HTML5
	媒体标签
		视频<video><source></video>
			支持视频格式
				Ogg，MPEG 4，WebM
			属性
				src音频url
				width,height视频长宽
				controls视频显示控件
				autoplay视频自动播放
				loop视频循环播放
				muted静音
				poster图片显示
				preload:auto/meta/none是否预加载视频和autoplay冲突
		音频<audio><source></audio>
			支持音频格式
				Ogg Vorbis,MP3,Wav
			属性
				src音频url
				controls音频显示控件
				autoplay音频自动播放
				loop音频循环播放
				muted静音
				preload:auto/meta/none是否预加载音频和autoplay冲突
	
	拖动标签
		拖放
			Drag（拖动）和drop（放置）
	
	画布标签
		画布<canvas></canvas>
			操作（在JS里操作）
				getContext("2d");创建2d画布
				beginPath();closePath();开始和结束画笔
				fill(),fillRect();fillStyle();填充
				moveTo();lineTo();rect();arc();arcTo();画线
				stroke();strokeRect();strokeStyle();描线
				clearRect();清楚画布
				lineWidth();线粗
				createLinearGradient();createRadialGradient();addColorStop();渐变
				save();restore();存储和还原属性信息
				scale();rotate();translate();transform();画布的移动，旋转，缩放
				drawImage();图像绘制
		矢量图（SVG）<svg><polygon></svg>
			SVG使用XML格式定义图形
			
		Canvas
			依赖分辨率
			不支持事件处理器
			弱的文本渲染能力
			能够以 .png 或 .jpg 格式保存结果图像
			最适合图像密集型的游戏，其中的许多对象会被频繁重绘
		SVG
			不依赖分辨率
			支持事件处理器
			最适合带有大型渲染区域的应用程序（比如谷歌地图）
			复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）
			不适合游戏应用
		
	地理位置
		Geolocation API百度或者谷歌地图接口
			getCurrentPosition();获得用户当前位置（始终返回latitude、longitude 以及 accuracy 属性）
				coords.latitude	十进制数的纬度
				coords.longitude	十进制数的经度
				coords.accuracy	位置精度
				coords.altitude	海拔，海平面以上以米计
				coords.altitudeAccuracy	位置的海拔精度
				coords.heading	方向，从正北开始以度计
				coords.speed	速度，以米/每秒计
				timestamp	响应的日期/时间
			watchPosition() - 返回用户的当前位置，并继续返回用户移动时的更新位置（就像汽车上的 GPS）。
			clearWatch() - 停止 watchPosition() 方法
			
	Web存储
		localStorage - 没有时间限制的数据存储
			localStorage.name="";
		sessionStorage - 针对一个 session 的数据存储
			sessionStorage.name="";
			
	应用缓存Application Cache
		离线浏览 - 用户可在应用离线时使用它们
		速度 - 已缓存资源加载得更快
		减少服务器负载 - 浏览器将只从服务器下载更新过或更改过的资源。
		<html manifest="demo.appcache">
			manifest 文件可分为三个部分：
				CACHE MANIFEST - 在此标题下列出的文件将在首次下载后进行缓存
				NETWORK - 在此标题下列出的文件需要与服务器的连接，且不会被缓存
				FALLBACK - 在此标题下列出的文件规定当页面无法访问时的回退页面（比如 404 页面）
				
	Web Workers
		web worker 是运行在后台的 JavaScript，不会影响页面的性能。
			w=new Worker("demo_workers.js");创建web Workers对象
			w.onmessage=function(event){ 监听事件使用web Workers
				document.getElementById("result").innerHTML=event.data;
			};
			w.terminate(); 终止web Workers
		由于 web worker 位于外部文件中，它们无法访问下例 JavaScript 对象：
			window 对象
			document 对象
			parent 对象
			
	表单input新type类型
		email;验证邮件格式
		url;验证url地址格式
		number;输入范围内的数字通过max和min开设定
		range;滑动条数字范围通过max和min开设定
		Date pickers (date, month, week, time, datetime, datetime-local);日期选择
		search;搜索
		color;颜色
		
	表单新元素标签
		datalist;下来菜单
		keygen;发送密钥非为私钥储存在客户端和公钥发送到服务器
		output;元素用于不同类型的输出
		
	表单新属性
		新的 form 属性：
			autocomplete
			novalidate
		新的 input 属性：
			autocomplete
			autofocus
			form
			form overrides (formaction, formenctype, formmethod, formnovalidate, formtarget)
			height 和 width
			list
			min, max 和 step
			multiple
			pattern (regexp)
			placeholder
			required
			
	新标签
		新增的结构标签：
			1、section元素 
			表示页面中的一个内容区块,比如章节、页眉、页脚或页面的其他部分。可以和h1、 h2……等元素结合起来使用，表示文档结构。例：HTML5中<section>……</section>;HTML4中<div> ……</div>。
			2、article元素 
			表示页面中一块与上下文不相关的独立内容。比如一篇文章。
			3、aside元素 
			表示article元素内容之外的、与article元素内容相关的辅助信息。
			4、header元素 
			表示页面中一个内容区块或真个页面的标题。
			5、hgroup元素 
			表示对真个页面或页面中的一个内容区块的标题进行组合。
			6、footer元素 
			表示整个页面或页面中一个内容区块的脚注。一般来说，他会包含创作者的姓名、创作日期以及创作者的联系信息。
			7、nav元素 
			表示页面中导航链接的部分。
			8、figure元素 
			表示一段独立的流内容，一般表示文档主体流内容中的一个独立单元。使用figcaption元素为figure元素组添加标题。例如： 
			<figure> 
			<figcaption>PRC</figcaption> 
			<p>The People's Republic of China was born in 1949</p> 
			</figure> 
			HTML4中常写作 
			<dl> 
			<h1>prc</h1> 
			<p>The People's Republic of China was born in 1949</p> 
			</dl>
			新增的其他元素：
			1、video元素 
			定义视频。像电影片段或其他视频流。例：<video src="movie.ogg" controls="controls">video元素</video> 
			HTML4中写法： 
			<object type="video/ogg" data="move.ogv"> 
			  <param name ="src" value="movie.ogv"> 
			</object>
			2、audio元素 
			定义音频。如音乐或其他音频流。例：<audio src ="someaudio.wav">audio元素</audio> 
			html4中写法： 
			<object tyle="application/ogg" data="someaudio.wav"> 
			  <param name ="src" value= "someaudio.wav"> 
			</object>
			3、embed元素 
			用来嵌入内容(包括各种媒体)。格式可以是Midi、Wav、AIFF、AU、MP3,flash等。例：<embed src="flash.swf" /> 
			HTML4中代码示例<object data="flash.swf" type="application/x-shockwave-flash"><object>
			4、mark元素 
			主要用来在视觉上向用户呈现哪些需要突出显示或高亮显示的文字。典型应用搜索结果中高亮显示搜素关键字。 
			HTML5<mark></mark>;HTML4 <span></span>。
			5、progress元素 
			表示运行中的进程，可以使用progress元素显示JavaScript中耗时时间函数的进程。等待中……、请稍后等。<progress></progress>。
			6、time元素 
			表示日期或时间，也可以两者同时。
			7、ruby元素 
			定义 ruby 注释（中文注音或字符）。 
			与 <ruby> 以及 <rt> 标签一同使用。ruby 元素由一个或多个字符（需要一个解释/发音）和一个提供该信息的 rt 元素组成，还包括可选的 rp 元素，定义当浏览器不支持 "ruby" 元素时显示的内容。 
			<ruby> 
			  汉 <rt><rp>(</rp>ㄏㄢˋ<rp>)</rp></rt> 
			</ruby>
			8、rt元素 
			定义字符（中文注音或字符）的解释或发音。
			9、rp元素 
			在 ruby 注释中使用，以定义不支持 ruby 元素的浏览器所显示的内容。
			10、wbr元素 
			表示软换行。与br元素的区别：br元素表示此处必须换行；wbr表示浏览器窗口或父级元素足弓宽时（没必要换行时），不换行，而宽度不够时主动在此处换行。
			11、canvas元素 
			定义图形，比如图表和其他图像。<canvas> 元素只是图形容器（画布），必须使用脚本来绘制图形。 
			<canvas id="myCanvas"></canvas><script type="text/javascript"> 
			var canvas=document.getElementById('myCanvas'); 
			var ctx=canvas.getContext('2d'); 
			ctx.fillStyle='#FF0000'; 
			ctx.fillRect(0,0,80,100); 
			</script>
			12、command元素——貌似没什么效果。是不是支持有问题 
			表示命令按钮，比如单选按钮、复选框或按钮。
			只有当 command 元素位于 menu 元素内时，该元素才是可见的。否则不会显示这个元素，但是可以用它规定键盘快捷键。。 
			<menu> 
			<command onclick="alert('Hello World')"> 
			Click Me!</command> 
			</menu>
			13、details标签 目前只有 Chrome 支持 details 标签 
			用于描述文档或文档某个部分的细节 。 
			可与 summary 标签配合使用，summary可以为 details 定义标题。标题是可见的，用户点击标题时，会显示出 details。summary应该是details的第一个子元素。
			14、datalist标签 
			定义选项列表。请与 input 元素配合使用该元素，来定义 input 可能的值。datalist 及其选项不会被显示出来，它仅仅是合法的输入值列表。使用 input 元素的 list 属性来绑定 datalist。 
			15、标签 
			定义不同类型的输出，比如脚本的输出。 
			<form action="form_action.asp" method="get" name="sumform"> 
			<output name="sum"></output> 
			</form>
			16、source标签 
			标签为媒介元素（比如 <video> 和 <audio>）定义媒介资源。
			17、menu标签 
			定义菜单列表。当希望列出表单控件时使用该标签。注意与nav的区别，menu专门用于表单控件。 
			废除的元素：
			1、能用css代替的元素 
			basefont、big、center、font、s、strike、tt、u。这些元素纯粹是为画面展示服务的，HTML5中提倡把画面展示性功能放在css中统一编辑。
			2、不再使用frame框架。
			frameset、frame、noframes。HTML5中不支持frame框架，只支持iframe框架，或者用服务器方创建的由多个页面组成的符合页面的形式，删除以上这三个标签。
			3、只有部分浏览器支持的元素
			applet、bgsound、blink、marquee等标签。
			4、其他被废除的元素
			废除rb，树勇ruby替代。
			废除acronym使用abbr替代。
			废除dir使用ul替代。
			废除isindex使用form与input相结合的方式替代
			废除listing使用pre替代
			废除xmp使用code替代
			废除nextid使用guids
			废除plaintex使用“text/plian”（无格式正文）MIME类型替代。
		
	新属性
		contenteditable 规定元素内容是否可编辑
		contextmenu 规定元素上下文菜单。上下文菜单在用户点击元素时显示
		data- 用于储存页面或应用程序的私有定制数据
		draggable 规定元素是否可拖动
		dropzone 规定在拖动被拖动数据时是否进行复制，移动或链接
		hidden 规定元素仍未或不再相关
		spellcheck 规定是否对元素进行拼写和语法检查
		translate 规定是否应该翻译元素内容
		
	新事件
		window 事件
			onafterprint 文档打印之后运行的脚本
			onbeforeprint 文档打印之前运行的脚本
			onbeforeunload 文档被卸载之前运行的脚本
			onerror 在错误发生时运行的脚本
			onhaschange 当文档已改变时运行的脚本
			onmessage 在消息被处罚时运行的脚本
			onoffline 当文档离线时运行的脚本
			ononline 当文档上线时运行的脚本
			onpagehide 当窗口隐藏时运行的脚本
			onpageshow 当窗口成为可见时运行的脚本
			onpopstate 当窗口历史纪录改变时运行的脚本
			onredo 当文档执行撤销(redo)时运行的脚本
			onresize 当浏览器窗口被调整大小时出发
			onstorage 在Web Storage 区域更新后运行的脚本
			onundo 在文档执行undo 时运行的脚本
			
		form 事件
			oncontextmenu 当上下文菜单被触发时运行的脚本
			onformchange 在表单改变时运行的脚本
			onforminput 当表单获得用户输入时运行的脚本
			oninput 当表单获得用户输入时运行的脚本
			oninvalid 当元素无效时运行的脚本
			
		Mouse 事件
			ondrag 元素被拖动时运行的脚本
			ondragend 在拖动操作末端运行的脚本
			ondragenter 当元素已被拖动到有效拖放区域时运行的脚本
			ondragleave 当元素离开有效拖放目标时运行的脚本
			ondragover 当元素在有效拖放目标上正在被拖动时运行的脚本
			ondragstart 在拖动操作开端运行的脚本
			ondrop 当被拖元素正在被拖放时运行的脚本
			onmousewheel 当鼠标滚轮正在被滚动时运行的脚本
			onscroll 当元素滚动条被滚动时运行的脚本
			
		Media 事件
			oncanplay 当文件就绪可以开始播放时运行的脚本（缓冲已足够开始时）。
			oncanplaythrough 当媒介能够无需因缓冲而停止即可播放至结尾时运行的脚本。
			ondurationchange 当媒介长度改变时运行的脚本。
			onemptied 当发生故障并且文件突然不可用时运行的脚本（比如连接意外断开时）。
			onended 当媒介已到达结尾时运行的脚本（可发送类似“感谢观看”之类的消息）。
			onerror 当在文件加载期间发生错误时运行的脚本。
			onloadeddata 当媒介数据已加载时运行的脚本。
			onloadedmetadata 当元数据（比如分辨率和时长）被加载时运行的脚本。
			onloadstart 在文件开始加载且未实际加载任何数据前运行的脚本。
			onpause 当媒介被用户或程序暂停时运行的脚本。
			onplay 当媒介已就绪可以开始播放时运行的脚本。
			onplaying 当媒介已开始播放时运行的脚本。
			onprogress 当浏览器正在获取媒介数据时运行的脚本。
			onratechange 每当回放速率改变时运行的脚本（比如当用户切换到慢动作或快进模式）。
			onreadystatechange 每当就绪状态改变时运行的脚本（就绪状态监测媒介数据的状态）。
			onseeked 当 seeking 属性设置为 false（指示定位已结束）时运行的脚本。
			onseeking 当 seeking 属性设置为 true（指示定位是活动的）时运行的脚本。
			onstalled 在浏览器不论何种原因未能取回媒介数据时运行的脚本。
			onsuspend 在媒介数据完全加载之前不论何种原因终止取回媒介数据时运行的脚本。
			ontimeupdate 当播放位置改变时（比如当用户快进到媒介中一个不同的位置时）运行的脚本。
			onvolumechange 每当音量改变时（包括将音量设置为静音）时运行的脚本。


CSS3
	边框
		border-radius px/em 倒角
		box-shadow 水平位置 垂直位置 模糊度 尺寸 颜色 外部/内部阴影转换  盒子阴影
		border-image:source图片路径 slice边框偏移 width边框宽度 outset边框超出区域的量 repeat 边框平铺/铺满/拉伸  边框图片
	
	背景
		background-size 背景图片大小
		background-origin 背景图片定位区域
		background-clip 背景绘制区域
		
	文本属性
		text-overflow 规定当文本溢出包含元素时发生的事情
		text-shadow 向文本添加阴影
		text-wrap 规定文本的换行规则
		hanging-punctuation 标点字符是否位于线框之外
		punctuation-trim 是否对标点字符进行修剪
		text-align-last 设置如何对齐最后一行或紧挨着强制换行符之前的行
		text-emphasis 向元素的文本应用重点标记以及重点标记的前景色
		text-justify 规定当 text-align 设置为 "justify" 时所使用的对齐方法
		text-outline 规定文本的轮廓
		word-break 规定非中日韩文本的换行规则
		word-wrap 允许对长的不可分割的单词进行分割并换行到下一行
			
	字体
		font-family 名称
		src 字体文本路径
		font-style 字体样式
		font-weight 字体粗细
		font-stretch 拉伸字体
		unicode-range 字体支持字符范围
		
	2D转换
		transform:
			translate() 移动
			rotate() 旋转
			scale() 缩放
			skew() 倾斜
			matrix() 综合
			
	3D转换
		transform:
			translate3d();移动综合
			translateX/Y/Z();移动X/Y/Z
			scale3d();缩放综合
			scaleX/Y/Z();缩放X/Y/Z
			rotate3d();旋转综合
			rotateX/Y/Z();旋转X/Y/Z
			perspective();透视试图
			
	过度
		transition:
			过度属性 过度时间 过度曲线 过度延迟
	
	动画
		@keyframes [name]{}动画函数
		animation :
			animation-name	规定 @keyframes 动画的名称
			animation-duration	规定动画完成一个周期所花费的秒或毫秒。默认是 0
			animation-timing-function	规定动画的速度曲线。默认是 "ease"
			animation-delay	规定动画何时开始。默认是 0
			animation-iteration-count	规定动画被播放的次数。默认是 1
			animation-direction	规定动画是否在下一周期逆向地播放。默认是 "normal"
			animation-play-state	规定动画是否正在运行或暂停。默认是 "running"
			animation-fill-mode	 属性规定动画在播放之前或之后，其动画效果是否可见
			
	分栏
		column-count	规定元素应该被分隔的列数
		column-fill	规定如何填充列
		column-gap	规定列之间的间隔
		column-rule	设置所有 column-rule-* 属性的简写属性
		column-rule-color	规定列之间规则的颜色
		column-rule-style	规定列之间规则的样式
		column-rule-width	规定列之间规则的宽度
		column-span	规定元素应该横跨的列数
		column-width	规定列的宽度
		columns	规定设置 column-width 和 column-count 的简写属性
		
	界面
		box-sizing	允许您以确切的方式定义适应某个区域的具体内容
		outline-offset	对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓
		resize	规定是否可由用户对元素的尺寸进行调整
		icon	为创作者提供使用图标化等价物来设置元素样式的能力
		nav-down	规定在使用 arrow-down 导航键时向何处导航
		nav-index	设置元素的 tab 键控制次序
		nav-left	规定在使用 arrow-left 导航键时向何处导航
		nav-right	规定在使用 arrow-right 导航键时向何处导航
		nav-up	规定在使用 arrow-up 导航键时向何处导航 
		appearance	允许您将元素设置为标准用户界面元素的外观
		
		
JQuery
	淡入淡出
		fadeIn() 淡入
		fadeOut() 淡出
		fadeToggle() 淡入淡出
		fadeTo() 透明度
	
	滑动
		slideDown() 向下滑动
		slideUp() 向上滑动
		slideToggle() 滑动转化
		
	动画
		animate(CSS属性,时间,回调函数)
		
	Dom增删改查
		append() - 在被选元素的结尾插入内容
		prepend() - 在被选元素的开头插入内容
		after() - 在被选元素之后插入内容
		before() - 在被选元素之前插入内容
		remove() - 删除被选元素（及其子元素）
		empty() - 从被选元素中删除子元素
		$("#box").append($("span").clone(true)); - 复制节点  clone里面的参数如果为true的话不仅复制节点 连事件一同复制
		parent() 方法返回被选元素的直接父元素
		parents() 方法返回被选元素的所有祖先元素，它一路向上直到文档的根元素 (<html>)
		parentsUntil() 方法返回介于两个给定元素之间的所有祖先元素
		children() 方法返回被选元素的所有直接子元素
		find() 方法返回被选元素的后代元素，一路向下直到最后一个后代
		siblings() 所有兄弟元素
		next() 下一个兄弟元素
		nextAll() 下面所有兄弟元素
		nextUntil() 方法返回介于两个给定元素之间的所有兄弟元素
		prev() 上一个兄弟元素
		prevAll() 上面所有的兄弟元素
		prevUntil() 方法返回介于两个给定元素之间的所有兄弟元素
		first() 方法返回被选元素的首个元素
		last() 方法返回被选元素的最后一个元素
		filter() 方法允许您规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回
		not() 方法返回不匹配标准的所有元素
		
		
	添加元素
		addClass() - 向被选元素添加一个或多个类
		removeClass() - 从被选元素删除一个或多个类
		toggleClass() - 对被选元素进行添加/删除类的切换操作
		css() - 设置或返回样式属性
		attr() - 添加标签里的元素
		
		
		
		
	
	onblur	-	元素失去焦点时运行的脚本
	onchange	-	在元素值被改变时运行的脚本
	onfocus	-	当元素获得焦点时运行的脚本
	onmousedown	-	当元素上按下鼠标按钮时触发
	onmousemove	-	当鼠标指针移动到元素上时触发
	onmouseout	-	当鼠标指针移出元素时触发
	onmouseover	-	当鼠标指针移动到元素上时触发
	onmouseup	-	当在元素上释放鼠标按钮时触发
		
	
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
